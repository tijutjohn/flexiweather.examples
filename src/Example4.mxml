<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
			   xmlns="*"
			   minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<widgets:InteractiveWidget id="m_iw" width="100%" height="100%" anticollisionUpdated="anticollisionUpdateCount++"
							   	areaChanged="onAreaChanged(event)">
		<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1"/>
		<widgets:InteractiveLayerPan id="m_ilp" zOrder="2" startPanning="startPanning()" stopPanning="stopPanning()"/>
	</widgets:InteractiveWidget>
	
	<mx:UIComponent id="canvas"/>
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.events.InteractiveWidgetEvent;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerWMS;
			import com.iblsoft.flexiweather.ogc.OGCServiceConfigurationManager;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.cache.WMSCache;
			import com.iblsoft.flexiweather.ogc.kml.controls.KMLLabel;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.utils.anticollision.AnticollisionLayoutObject;
			
			import mx.events.FlexEvent;
			
			/******************************
			 * edit these variables to make changes in example
			 *****************************/
			
			public var totalLabels: int = 500;
			public var addLabelsToAnticollisionLayout: Boolean = true;
			
			/*****************************
			 * End of section for editing variables
			 *****************************/
			
			[Bindable]
			public var anticollisionUpdateCount: int = 0;
			
			private var _labels: Array = [];
			
			
			/** 
			 * Initialization of example. Temperature layer creation, call get capabilities
			 */
			override protected function onCreationComplete(event: FlexEvent): void
			{
				super.onCreationComplete(event);
				
				WMSCache.supportCaching = false;
				
//				m_iw.setCRS('EPSG:900913', false);
//				m_iw.setExtentBBOXRaw(-20037508.34,-20037508.34,20037508.34,20037508.34);
				m_iw.setCRS('CRS:84', false);
				m_iw.setExtentBBOXRaw(-180, -90, 180, 90);
				
				var lWMS: InteractiveLayerWMS = addLayer('dem', 1);
				
				//this needs to be called to load GetCapabilities requests, otherwise no maps will be displayed
				scm.update(scm.getAllServicesNames());
				
				for (var i: int = 0; i < totalLabels; i++)
				{
					addKMLLabel();
				}
				update();
				
				
			}
			
			private function onAreaChanged(event: InteractiveWidgetEvent): void
			{
				update();
			}
			private function update(): void
			{
				for each (var obj: Object in _labels)
				{
					var label: KMLLabel = obj.label as KMLLabel;
					var c: Coord = obj.position as Coord
					var pt: Point = m_iw.coordToPoint(c);
					
					
					label.x = pt.x;
					label.y = pt.y;
					
					m_iw.labelLayout.updateObjectReferenceLocation(label);
						
					
				}
			}
			
			private function addKMLLabel(): void
			{
				var kmlLabel: KMLLabel = new KMLLabel();
				kmlLabel.text = "test";
				
				var coord: Coord = new Coord('CRS:84', -180 + Math.random() * 360, -90 + Math.random() * 180);
				
				if (addLabelsToAnticollisionLayout) {
					var anticollisionLayoutObject: AnticollisionLayoutObject = m_iw.labelLayout.addObject(kmlLabel);
					kmlLabel.anticollisionLayoutObject = anticollisionLayoutObject;
				} else {
					canvas.addChild(kmlLabel);
				}
				
				_labels.push({label: kmlLabel, position: coord});
			}
			
			private var _layoutVisibilityBeforePanning: Boolean;
			private function startPanning(): void
			{
				m_iw.suspendAnticollisionProcessing = true;
				_layoutVisibilityBeforePanning = m_iw.labelLayout.visible;
				
				m_iw.labelLayout.visible = false;
				
			}
			private function stopPanning(): void
			{
				m_iw.suspendAnticollisionProcessing = false;
				m_iw.labelLayout.visible = _layoutVisibilityBeforePanning;
			}
		]]>
	</fx:Script>
	
</FlexiWeatherTemplate>
