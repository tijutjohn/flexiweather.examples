<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
					  xmlns:widgets="com.iblsoft.flexiweather.widgets.*"
					  xmlns="*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<!--<s:HGroup width="100%">
			<s:Button label="Add Temperature Layer" click="addTemperatureLayer()"/>
		</s:HGroup>-->
		<s:HGroup width="100%">
			<s:Button label="Get RUNs" click="getDimension('RUN')"/>
			<s:Button label="Get FORECASTs" click="getDimension('FORECAST')"/>
			<s:Button label="Get LEVELs" click="getDimension('LEVEL')"/>
		</s:HGroup>
		<widgets:InteractiveWidget id="m_iw" width="100%" height="100%">
			<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1" enabled="true" minimimMapScale="100000"/>
			<widgets:InteractiveLayerPan id="m_ilp" zOrder="2" enabled="true"/>
		</widgets:InteractiveWidget>
	</s:VGroup>
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.FlexiWeatherConfiguration;
			import com.iblsoft.flexiweather.ogc.InteractiveLayerMSBase;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.WMSDimension;
			import com.iblsoft.flexiweather.ogc.configuration.layers.WMSWithQTTLayerConfiguration;
			import com.iblsoft.flexiweather.ogc.configuration.services.WMSServiceConfiguration;
			import com.iblsoft.flexiweather.ogc.events.ServiceCapabilitiesEvent;
			import com.iblsoft.flexiweather.ogc.tiling.InteractiveLayerWMSWithQTT;
			
			import mx.events.FlexEvent;
			
			[Embed (source="/assets/TemperatureGCXMLNode.xml", mimeType="application/octet-stream")]
			public var temperatureLayerXMLClass: Class;
			
			private var _temperatureLayer: InteractiveLayerWMSWithQTT;
			
			override protected function onCreationComplete(event:FlexEvent):void
			{
				FlexiWeatherConfiguration.FLEXI_WEATHER_LOADS_GET_CAPABILITIES = false;
				
				super.onCreationComplete(event);
				
				var byteArray1: * = new temperatureLayerXMLClass();
				var byteArray:ByteArray = new temperatureLayerXMLClass() as ByteArray;
				var temperatureLayerNode:XML = new XML(byteArray.readUTFBytes(byteArray.length));
				
				
				var srv: WMSServiceConfiguration;
				var lc: WMSWithQTTLayerConfiguration;
				var tileSize: uint = 256;
				
				srv = getWMSLayerConfiguration('gfs');
				lc = new WMSWithQTTLayerConfiguration(srv, ["temperature"], tileSize);
				lc.avoidTiling = true;
				lc.label = "Temperature";
				lc.dimensionRunName = 'RUN';
				lc.dimensionForecastName = 'FORECAST';

				/**
				 * parse  just temperature layer node from GetCapabilities
				 */
				lc.populateLayerCapabilities(temperatureLayerNode)
				
				_temperatureLayer = new InteractiveLayerWMSWithQTT(m_iw, lc);
				_temperatureLayer.name = 'Temperature';
				
				m_iw.interactiveLayerMap.addLayer(_temperatureLayer);
				
			}
			
			
			private function getDimension(dim: String): void
			{
				var tempLayer: InteractiveLayerMSBase;
				
				var numLayers: int = m_iw.interactiveLayerMap.layers.length;
				for (var i: int = 0; i < numLayers; i++)
				{
					var layer: InteractiveLayerMSBase = m_iw.interactiveLayerMap.layers.getItemAt(i) as InteractiveLayerMSBase;
					if (layer.name == 'Temperature')
					{
						tempLayer = layer;
						break;
					}
				}
				if (tempLayer)
				{
					var dimNames: Array = tempLayer.getWMSDimensionsNames();
					for each (var dimName: String in dimNames)
					{
						if (dimName == dim)
						{
							var dimValues: Array = tempLayer.getWMSDimensionsValues(dimName);
							trace("Dimension : " + dimName + " values: " + dimValues.length);
						}
					}
				}
			}
			private function addTemperatureLayer(): void
			{
				m_iw.interactiveLayerMap.addLayer(_temperatureLayer);
			}
		]]>
	</fx:Script>
</FlexiWeatherTemplate>
