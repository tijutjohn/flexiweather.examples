<?xml version="1.0" encoding="utf-8"?>
<FlexiWeatherTemplate xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:widgets="com.iblsoft.flexiweather.widgets.*" xmlns="examples.*"
					  xmlns:editable="com.iblsoft.flexiweather.ogc.editable.*" xmlns:ogc="com.iblsoft.flexiweather.ogc.*">
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.ogc.editable.data.IconFeatureType;
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<states>
		<s:State name="normal"/>
		<s:State name="editing"/>
	</states>
	<s:VGroup width="100%" height="100%">
		
		
		<s:BorderContainer backgroundColor="0xe0e0e0" borderColor="0xaaaaaa" width="100%"
						   minHeight="0">
			<s:HGroup id="hboxMenu" width="100%" verticalAlign="middle" paddingBottom="5"
					  paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Change projection"/>
				<s:ToggleButton label="LatLon CRS:84" selected="{m_iw.crs == 'CRS:84'}"
								click="m_iw.setCRS('CRS:84', false); m_iw.setExtentBBoxRaw(-180,-90,180,90);"/>
				<s:ToggleButton label="North Polar Stereo" selected="{m_iw.crs == 'ESRI:102018'}"
								click="m_iw.setCRS('ESRI:102018', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
				<s:ToggleButton label="South Polar Stereo" selected="{m_iw.crs == 'ESRI:102021'}"
								click="m_iw.setCRS('ESRI:102021', false); m_iw.setExtentBBoxRaw(-10000000,-10000000,10000000,10000000);"/>
				<s:ToggleButton label="Google Maps" selected="{m_iw.crs == 'EPSG:900913'}"
								click="m_iw.setCRS('EPSG:900913', false); m_iw.setExtentBBoxRaw(-20037508.34,-20037508.34,20037508.34,20037508.34);"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:BorderContainer backgroundColor="0xe0e0e0" borderColor="0xaaaaaa" width="100%"
						   minHeight="0">
			<s:HGroup width="100%" verticalAlign="middle" paddingBottom="5"
					  paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Show"/>
				<s:CheckBox label="Show GeoPolyline" change="changeFeatureVisibility(0, (event.target as CheckBox).selected)" selected="true" />
				<s:CheckBox label="Show SmoothGeoPolyline" change="changeFeatureVisibility(1, (event.target as CheckBox).selected)" selected="true"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:BorderContainer backgroundColor="0xe0e0e0" borderColor="0xaaaaaa" width="100%"
						   minHeight="0">
			<s:HGroup width="100%" verticalAlign="middle" paddingBottom="5"
					  paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Change feature"/>
				<s:ToggleButton label="Refl Special 0" click="updateFeature(100)"/>
				<s:ToggleButton label="Refl 0" click="updateFeature(0)"/>
				<s:ToggleButton label="Refl 1" click="updateFeature(1)"/>
				<s:ToggleButton label="Refl -1" click="updateFeature(2)"/>
				<s:ToggleButton label="Dateline crossing (1)" click="updateFeature(3)"/>
				<s:ToggleButton label="Dateline crossing (2)" click="updateFeature(4)"/>
				<s:ToggleButton label="Coords more than extent/2 (2 coords)" click="updateFeature(5)"/>
				<s:ToggleButton label="Coords less than extent/2 (2 coords)" click="updateFeature(6)"/>
				<s:ToggleButton label="Coords more than extent/2 (4 coords)" click="updateFeature(7)"/>
				<s:ToggleButton label="Coords less than extent/2 (4 coords)" click="updateFeature(8)"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:BorderContainer backgroundColor="0xe0e0e0" borderColor="0xaaaaaa" width="100%"
						   minHeight="0">
			<s:HGroup width="100%" verticalAlign="middle" paddingBottom="5"
					  paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Change feature"/>
				<s:ToggleButton label="Plain" click="updateDrawMode(0)"/>
				<s:ToggleButton label="Great Arc" click="updateDrawMode(1)"/>
			</s:HGroup>
		</s:BorderContainer>
		<s:BorderContainer backgroundColor="0xe0e0e0" borderColor="0xaaaaaa" width="100%"
						   minHeight="0">
			<s:HGroup width="100%" verticalAlign="middle" paddingBottom="5"
					  paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="BBox: {bbox.toString()}  Shown On Screen: {shownOnScreen}"/>
				<!--<s:Button label="Check Shown on Screen"/>-->
			</s:HGroup>
		</s:BorderContainer>
		
		<s:Group  width="100%" height="100%">
			
			<widgets:InteractiveWidget id="m_iw" width="100%" height="100%" areaChanged="onAreaChanged(event)"
									   >
				<widgets:InteractiveLayerZoom id="m_ilz" zOrder="1"/>
				<widgets:InteractiveLayerPan id="m_ilp" zOrder="2"/>
				
				<ogc:InteractiveLayerWFSFeatureEditor id="wfsLayer" version="{new Version(1,1,0)}"
													  zOrder="1000"/>
				
				<widgets:InteractiveLayerReflection zOrder="2000" visible="true"/>
				
			</widgets:InteractiveWidget>
			<mx:UIComponent id="canvas"  width="100%" height="100%"/>
		</s:Group>
		
	</s:VGroup>
	
	
	<fx:Script>
		<![CDATA[
			import com.iblsoft.flexiweather.ogc.wfs.WFSFeatureEditableSprite;
			import com.iblsoft.flexiweather.utils.draw.DrawMode;
			import com.iblsoft.flexiweather.symbology.FrontCurveRenderer;
			import com.iblsoft.flexiweather.utils.ICurveRenderer;
			import com.iblsoft.flexiweather.ogc.editable.data.FeatureData;
			import com.iblsoft.flexiweather.events.InteractiveWidgetEvent;
			import com.iblsoft.flexiweather.ogc.BBox;
			import com.iblsoft.features.StarFeature;
			import com.iblsoft.flexiweather.events.InteractiveLayerEvent;
			import com.iblsoft.flexiweather.net.events.UniURLLoaderErrorEvent;
			import com.iblsoft.flexiweather.net.events.UniURLLoaderEvent;
			import com.iblsoft.flexiweather.net.loaders.AbstractURLLoader;
			import com.iblsoft.flexiweather.ogc.FeatureBase;
			import com.iblsoft.flexiweather.ogc.FeatureUpdateContext;
			import com.iblsoft.flexiweather.ogc.Version;
			import com.iblsoft.flexiweather.ogc.editable.IObjectWithBaseTimeAndValidity;
			import com.iblsoft.flexiweather.ogc.editable.InteractiveLayerWFSEditable;
			import com.iblsoft.flexiweather.ogc.editable.WFSFeatureEditable;
			import com.iblsoft.flexiweather.ogc.editable.WFSFeatureEditableMode;
			import com.iblsoft.flexiweather.ogc.editable.annotations.CloudAnnotation;
			import com.iblsoft.flexiweather.ogc.editable.annotations.IcingAreaAnnotation;
			import com.iblsoft.flexiweather.ogc.editable.annotations.StormAnnotation;
			import com.iblsoft.flexiweather.ogc.editable.annotations.ThunderstormAreaAnnotation;
			import com.iblsoft.flexiweather.ogc.editable.annotations.TurbulenceAreaAnnotation;
			import com.iblsoft.flexiweather.ogc.editable.data.FeatureType;
			import com.iblsoft.flexiweather.ogc.editable.data.MoveablePoint;
			import com.iblsoft.flexiweather.ogc.editable.data.front.FrontType;
			import com.iblsoft.flexiweather.ogc.editable.featureEditor.data.FeatureEditorProduct;
			import com.iblsoft.flexiweather.ogc.editable.featureEditor.events.WFSTransactionEvent;
			import com.iblsoft.flexiweather.ogc.editable.features.WFSFeatureEditableMacro;
			import com.iblsoft.flexiweather.ogc.editable.features.WFSFeatureEditablePressureCentre;
			import com.iblsoft.flexiweather.ogc.editable.features.WFSFeatureEditableStorm;
			import com.iblsoft.flexiweather.ogc.editable.features.curves.WFSFeatureEditableFront;
			import com.iblsoft.flexiweather.ogc.editable.features.curves.withAnnotation.WFSFeatureEditableCloud;
			import com.iblsoft.flexiweather.ogc.editable.features.curves.withAnnotation.WFSFeatureEditableIcingArea;
			import com.iblsoft.flexiweather.ogc.editable.features.curves.withAnnotation.WFSFeatureEditableThunderstormArea;
			import com.iblsoft.flexiweather.ogc.editable.features.curves.withAnnotation.WFSFeatureEditableTurbulenceArea;
			import com.iblsoft.flexiweather.ogc.events.MoveablePointEvent;
			import com.iblsoft.flexiweather.ogc.wfs.WFSFeatureBase;
			import com.iblsoft.flexiweather.proj.Coord;
			import com.iblsoft.flexiweather.proj.Projection;
			import com.iblsoft.flexiweather.utils.ISO8601Parser;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			
			import examples.featureEditor.events.FeatureEditorEvent;
			import examples.featureEditor.popups.FeatureEditorProductSelectDialog;
			import examples.featureEditor.popups.ProgressPopup;
			private var currentFeatureType: String;
			private var currentFeatureSetting: Object;
			private var currentlyEditedFeature: WFSFeatureEditable;
			private var currentlySelectedPoint: MoveablePoint;
			
			[Bindable]
			public var product: FeatureEditorProduct;
			
			[Bindable]
			public var productName: String = "Please select product";
			
			protected var mb_serviceBusy: Boolean = false;
			
			[Bindable]
			public var transactionInProgress: Boolean;
			
			[Bindable]
			public var bbox: BBox;
			[Bindable]
			public var shownOnScreen: Boolean;
			
			private var sprite: WFSFeatureEditableSprite;
			
			override protected function onCreationComplete(event: FlexEvent): void
			{
				super.onCreationComplete(event);
				Projection.addCRSByProj4("ESRI:54004", "+title=World Mercator +proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs");
				Projection.addCRSByProj4("ESRI:102018", "+title=North Pole Stereographic +proj=stere +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				Projection.addCRSByProj4("ESRI:102021", "+title=South Pole Stereographic +proj=stere +lat_0=-90 +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m");
				m_iw.setCRS('CRS:84', false);
				m_iw.setExtentBBoxRaw(-180,-90, 180, 90);
//				m_iw.setViewBBox(new BBox(-240, -190, 240, 190), true);
				m_iw.setViewBBox(new BBox(160, 40, 200, 80), true);
				addLayer('dem', 1);
				addLayer('foreground', 1);
				
				getAllServicesCapabilities();
				
				bbox = new BBox(10,10,15,15);

				initializeGFX();
				updateDrawMode(0);
			}
			
			private function initializeGFX(): void
			{
				sprite = new WFSFeatureEditableSprite(null);
				wfsLayer.addChild(sprite);
				
				changeFeatureVisibility(0, true);
				changeFeatureVisibility(1, true);
			}
			
			private var _selectedFeatureType: int;
			private var _selectedDrawMode: String;
			private function updateDrawMode(type: int): void
			{
				switch(type)
				{
					case 0:
						_selectedDrawMode = DrawMode.PLAIN;
						break;
					case 1:
						_selectedDrawMode = DrawMode.GREAT_ARC;
						break;
				}
				drawLine();
			}
			
			private var _geoPolylineVisibility: Boolean;
			private var _smoothGeoPolylineVisibility: Boolean;
			
			private function changeFeatureVisibility(type: int, visible: Boolean): void
			{
				if (type == 0)
					_geoPolylineVisibility = visible;
				if (type == 1)
					_smoothGeoPolylineVisibility = visible;
				
				drawLine();
			}
			
			private function updateFeature(type: int): void
			{
				_selectedFeatureType = type;
				switch(_selectedFeatureType)
				{
					case 0:
						//no dateline crossing - reflection 0
					case 1:
						//no dateline crossing - reflection 1
					case 3:
						//dateline crossing
					case 4:
						//dateline crossing
						m_iw.setViewBBox(new BBox(160, 40, 200, 80), true);
						break;
					case 2:
						//no dateline crossing - reflection -1
						m_iw.setViewBBox(new BBox(-200, 40, -160, 80), true);
					case 5:
					case 6:
					case 7:
					case 8:
					case 100:
						m_iw.setViewBBox(new BBox(-180,-90, 180, 90), true);
						break;
				}
				
				drawLine();
			}
			
			private function drawLine(): void
			{
				var c1: Coord;
				var c2: Coord;
				var c3: Coord;
				var c4: Coord;
				
				var coords: Array;
				if (sprite)
					sprite.graphics.clear();
				
				switch(_selectedFeatureType)
				{
					case 0:
						//no dateline crossing - reflection 0
						c1 = new Coord(m_iw.crs, 165,60);
						c2 = new Coord(m_iw.crs, 169,61);
						c3 = new Coord(m_iw.crs, 172,62);
						c4 = new Coord(m_iw.crs, 165,65);
						coords = [c1,c2,c3,c4];
						break;
					case 1:
						//no dateline crossing - reflection 1
						c1 = new Coord(m_iw.crs, 185,60);
						c2 = new Coord(m_iw.crs, 189,61);
						c3 = new Coord(m_iw.crs, 192,62);
						c4 = new Coord(m_iw.crs, 185,65);
						coords = [c1,c2,c3,c4];
						break;
					case 2:
						//no dateline crossing - reflection -1
						c1 = new Coord(m_iw.crs, -185,60);
						c2 = new Coord(m_iw.crs, -189,61);
						c3 = new Coord(m_iw.crs, -192,62);
						c4 = new Coord(m_iw.crs, -185,65);
						coords = [c1,c2,c3,c4];
						break;
					case 100:
						//no dateline crossing - reflection 0
						c1 = new Coord(m_iw.crs, 175,60);
						c2 = new Coord(m_iw.crs, -175,61);
						c3 = new Coord(m_iw.crs, -165,62);
						c4 = new Coord(m_iw.crs, 165,65);
						coords = [c1,c2,c3,c4];
						break;
					case 3:
						//dateline crossing
						c1 = new Coord(m_iw.crs, 175,60);
						c2 = new Coord(m_iw.crs, 185,61);
						c3 = new Coord(m_iw.crs, 195,62);
						c4 = new Coord(m_iw.crs, 165,65);
						coords = [c1,c2,c3,c4];
						break;
					case 4:
						//dateline crossing
						c1 = new Coord(m_iw.crs, 175,60);
						c2 = new Coord(m_iw.crs, 185,61);
						c3 = new Coord(m_iw.crs, 165,62);
						c4 = new Coord(m_iw.crs, 195,65);
						coords = [c1,c2,c3,c4];
						break;
					case 5:
						//coordinate too far
						c2 = new Coord(m_iw.crs, -165,61);
						c3 = new Coord(m_iw.crs, 165,62);
						coords = [c2,c3];
						break;
					case 6:
						//coordinate too far
						c2 = new Coord(m_iw.crs, -85,61);
						c3 = new Coord(m_iw.crs, 85,62);
						coords = [c2,c3];
						break;
					case 7:
						//coordinate too far
						c1 = new Coord(m_iw.crs, -175,61);
						c2 = new Coord(m_iw.crs, -145,70);
						c3 = new Coord(m_iw.crs, 145,-50);
						c4 = new Coord(m_iw.crs, 165,-62);
						coords = [c1,c2,c3,c4];
						break;
					case 8:
						c1 = new Coord(m_iw.crs, -175,61);
						c2 = new Coord(m_iw.crs, -45,70);
						c3 = new Coord(m_iw.crs, 45,-50);
						c4 = new Coord(m_iw.crs, 165,-62);
						coords = [c1,c2,c3,c4];
						break;
				}
				
				
//				var s1: Coord = new Coord(m_iw.crs, 175,60);
//				var s2: Coord = new Coord(m_iw.crs, 185,61);
//				var s3: Coord = new Coord(m_iw.crs, 195,62);
//				var s4: Coord = new Coord(m_iw.crs, 165,65);
//				var s1: Coord = new Coord(m_iw.crs, 175,60);
//				var s2: Coord = new Coord(m_iw.crs, 400,121);
//				var s3: Coord = new Coord(m_iw.crs, 900,150);
//				var s4: Coord = new Coord(m_iw.crs, 700,240);
				
				var featureData: FeatureData = new FeatureData('test');
				if (_geoPolylineVisibility)
					m_iw.drawGeoPolyLine(getRenderer, coords, _selectedDrawMode, false, false, featureData);
				if (_smoothGeoPolylineVisibility)
					m_iw.drawSmoothPolyLine(getRenderer2, coords, _selectedDrawMode, false, false, featureData);
				
				
//				featureLayer.graphics.lineStyle(2,0xff0000);
//				featureLayer.graphics.moveTo(100,100);
//				featureLayer.graphics.lineTo(1000,1000);
//				m_iw.graphics.lineStyle(2,0xff0000);
//				m_iw.graphics.moveTo(100,100);
//				m_iw.graphics.lineTo(1000,1000);
			}
			
			public function getRenderer(reflection: int): ICurveRenderer
			{
				var gr: Graphics = m_iw.graphics;
				if (sprite)
				 	gr = sprite.graphics;
				return new FrontCurveRenderer(gr, 0xff0000, 0x00ff00, FrontCurveRenderer.MARK_WARM);
			}
			public function getRenderer2(reflection: int): ICurveRenderer
			{
				var gr: Graphics = m_iw.graphics;
				if (sprite)
					gr = sprite.graphics;
				return new FrontCurveRenderer(gr, 0x00ff00, 0x00ff00, FrontCurveRenderer.MARK_COLD);
			}
			
			private function onAreaChanged(event: InteractiveWidgetEvent): void
			{
				if (bbox)
				{
					var gr: Graphics = canvas.graphics;
					gr.clear();
					gr.lineStyle(1,0xaa0000);
					
					
					var pLeftTop: Point = m_iw.coordToPoint(new Coord("CRS:84", bbox.xMin, bbox.yMin));
					var pRightBottom: Point = m_iw.coordToPoint(new Coord("CRS:84", bbox.xMax, bbox.yMax));
					
					gr.moveTo(pLeftTop.x, pLeftTop.y);
					gr.lineTo(pRightBottom.x, pLeftTop.y);
					gr.lineTo(pRightBottom.x, pRightBottom.y);
					gr.lineTo(pLeftTop.x, pRightBottom.y);
					gr.lineTo(pLeftTop.x, pLeftTop.y);
					
					shownOnScreen = m_iw.shownOnScreen(bbox);
				}
				
				drawLine();
			}
			
			
		]]>
	</fx:Script>
</FlexiWeatherTemplate>